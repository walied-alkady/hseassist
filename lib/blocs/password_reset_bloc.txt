import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';
import 'package:get_it/get_it.dart';
import 'package:greasework/Exceptions/authentication_exception.dart';
import 'package:greasework/repository/logging_reprository.dart';
import 'package:greasework/service/authentication_service.dart';
import 'package:greasework/service/database_service.dart';
import 'package:greasework/service/preferences_service.dart';
import 'package:greasework/validations/validations.dart';

//states
class PasswordResetStates extends Equatable {
  final Password password;
  final PasswordConfirm passwordConfirm;
  
  final FormzSubmissionStatus status;
  final bool isValid;
  final String? errorMessage;

  const PasswordResetStates(
      {
      this.password = const Password.pure(),
      this.passwordConfirm = const PasswordConfirm.pure(),
    
      this.status = FormzSubmissionStatus.initial,
      this.isValid = false,
      this.errorMessage});
  @override
  List<Object?> get props =>
      [password, passwordConfirm, status, isValid];

  PasswordResetStates copyWith({
    Password? password,
    PasswordConfirm? passwordConfirm,
  
    FormzSubmissionStatus? status,
    bool? isValid,
    String? errorMessage,
  }) {
    return PasswordResetStates(
      
      password: password ?? this.password,
      passwordConfirm: passwordConfirm ?? this.passwordConfirm,

      status: status ?? this.status,
      isValid: isValid ?? this.isValid,
      errorMessage: errorMessage ?? this.errorMessage,
    );
  }
}
//events
abstract class PasswordResetEvents extends Equatable {
  /// Base class for events fired by [AuthenticationBloc]
  const PasswordResetEvents();
  @override
  List<Object> get props => [];
}

class LoadedPasswordReset extends PasswordResetEvents {
  const LoadedPasswordReset();
}

class ResetStatePasswordReset extends PasswordResetEvents {
  const ResetStatePasswordReset();
}

class NewPasswordChangedPasswordResetEvent extends PasswordResetEvents {
  final String password;
  const NewPasswordChangedPasswordResetEvent(this.password);
}

class PasswordConfirmPasswordResetEvent extends PasswordResetEvents {
  final String passwordToConfirm;
  const PasswordConfirmPasswordResetEvent(this.passwordToConfirm);
}

class ResetPasswordButtonTappedPasswordResetEvent extends PasswordResetEvents {
  const ResetPasswordButtonTappedPasswordResetEvent();
}

//bloc
class PasswordResetBloc extends Bloc<PasswordResetEvents, PasswordResetStates> {
  final authService = GetIt.instance<AuthenticationService>();
  final db = GetIt.instance<DatabaseService>();
  final log = GetIt.instance<LoggerReprository>()..name = 'RegisterBloc';
  final prefs = GetIt.instance<PreferencesService>();
  final String code;
  PasswordResetBloc(this.code) : super(const PasswordResetStates()) {
    on<NewPasswordChangedPasswordResetEvent>(_onNewPasswordChangedPasswordResetEvent);
    on<PasswordConfirmPasswordResetEvent>(_onPasswordConfirmPasswordResetEvent);
    on<ResetPasswordButtonTappedPasswordResetEvent>(_onResetPasswordButtonTappedPasswordResetEvent);
    on<ResetStatePasswordReset>(_onResetStatePasswordReset);
    on<LoadedPasswordReset>(_onLoadedPasswordReset);
  }

  void _onLoadedPasswordReset(LoadedPasswordReset event, Emitter<PasswordResetStates> emit){
    try{
      if(code.isEmpty){
        throw ResetPassFirebaseFailure.fromCode(AuthenticationExceptionCode.invalidActionCode.code);
      }
    }on ResetPassFirebaseFailure catch (e) {
      emit(
        state.copyWith(
          errorMessage: e.message,
          status: FormzSubmissionStatus.failure,
        ),
      ); 
    }
    on Exception catch (e) {
      emit(
        state.copyWith(
          errorMessage: e.toString(),
          status: FormzSubmissionStatus.failure,
        ),
      );
    } catch (_) {
      emit(state.copyWith(status: FormzSubmissionStatus.failure));
    }

  }

  void _onResetStatePasswordReset(ResetStatePasswordReset event, Emitter<PasswordResetStates> emit){
    emit(
      state.copyWith(
        password: const Password.pure(),
        passwordConfirm: const PasswordConfirm.pure()
      ),
    );
  }

  void _onNewPasswordChangedPasswordResetEvent(NewPasswordChangedPasswordResetEvent event, Emitter<PasswordResetStates> emit) {
    final value = Password.dirty(event.password);
    emit(
      state.copyWith(
        password: value,
        isValid: Formz.validate([
          value,
          state.passwordConfirm,
        ]),
      ),
    );
  }

  void _onPasswordConfirmPasswordResetEvent(PasswordConfirmPasswordResetEvent event, Emitter<PasswordResetStates> emit) {
    final value = PasswordConfirm.dirty(password: state.password.value,value:event.passwordToConfirm);
    emit(
      state.copyWith(
        passwordConfirm: value,
        isValid: Formz.validate([
          value,
          state.password,
        ]),
      ),
    );
  }

  Future<void> _onResetPasswordButtonTappedPasswordResetEvent(ResetPasswordButtonTappedPasswordResetEvent event, Emitter<PasswordResetStates> emit) async {
    emit(state.copyWith(status: FormzSubmissionStatus.inProgress));
    try {
      authService.updatePass(
        code: code , newPassword: state.password.value
      );
      emit(state.copyWith(status: FormzSubmissionStatus.success));
    }
    on ResetPassFirebaseFailure catch (e) {
      emit(
        state.copyWith(
          errorMessage: e.message,
          status: FormzSubmissionStatus.failure,
        ),
      ); 
    }
    on Exception catch (e) {
      emit(
        state.copyWith(
          errorMessage: e.toString(),
          status: FormzSubmissionStatus.failure,
        ),
      );
    } catch (_) {
      emit(state.copyWith(status: FormzSubmissionStatus.failure));
    }
  }

}
