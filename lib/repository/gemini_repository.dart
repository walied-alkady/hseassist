import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

class GeminiRepository{
  final String workplace ;
  final List<String> locations ;
  late final GenerativeModel _model;
  late final ChatSession _chatSession;
  late final GenerativeModel _embeddingModel; // Add this line

  GeminiRepository({this.workplace='workplace',this.locations=const [],List<Content>? chatHistory}){
    //Max Output Tokens: A token roughly equates to four characters. The "Max output tokens" setting defines the upper limit of tokens the response can generate. For instance, a limit of 100 tokens might produce approximately 60-80 words.
    // Temperature: This parameter influences the randomness of token selection. A lower temperature setting suits prompts needing more deterministic or specific responses. In contrast, a higher temperature can foster more varied or imaginative outputs.
    // TopK: Setting topK to 1 means the model chooses the most probable token from its vocabulary for the next token (greedy decoding). A topK of 3, however, allows the model to pick the next token from the three most probable options, based on the temperature setting.
    // TopP: This parameter enables token selection starting from the most probable, accumulating until the sum of probabilities reaches the topP threshold. For example, with tokens A, B, and C having probabilities of 0.3, 0.2, and 0.1, respectively, and a topP value of 0.5, the model will choose either A or B for the next token, utilizing the temperature setting, and exclude C from consideration.
    // Candidate Count: Specifies the maximum number of unique responses to generate. A candidate count of 2 means the model will provide two distinct response options.
    // Stop Sequences: You can specify some sequences of characters whose appearance in the output stops the API from generating a further answer. Let’s say we specify that we include the word “END” in the stop sequences. If the hypothetical result generated by the LLM would be “START MIDDLE END TERMINATE” without the sequence, after adding the sequence, it would turn to “START MIDDLE.”
    final String systemInstructions = 'you are a health and safety specialist\n\nyou should Advice and support reagrding health and safety in $workplace \nyou should generaly have references from Occupational Safety and Health Administration or Nebosh  \n\n* **Answer questions** about hazard identifications, risk assessment, health and safety obseravtions,audits, drills, and any other details relevant to  health and safety at $workplace.\n* **Use function calls when appropriate** to access specific information or perform actions related to health and safety at $workplace. You can also provide direct answers based on your knowledge. **Keep your responses concise,** focused, and relevant to the context of health and safety at $workplace.\n* **identifying hazards,** help identifying hazards at $workplace and help to check if a hazard is already identified before (check for hazard similarity).\n* **If a question is not related to health and safety in $workplace,** politely inform the user that you are not equipped to answer and suggest they seek information elsewhere. Avoid providing irrelevant answers or engaging in conversations on other topics.\n\n**Response Guidelines:**\n\n* **Prioritize accuracy:** Ensure the information you provide is correct and up-to-date. Use function calls to verify details when needed.\n* **Clarity and conciseness:** Communicate clearly, concisely, and in an easily understandable manner. Avoid overly long responses or digressions.\n* **Friendly and professional tone:** Be helpful and welcoming while maintaining a professional and appropriate tone.\n* **Language** Always try to answer in the same language the user used to interact\n* **Functions:** Use the following function calls to access specific information or add new task:\n    * `addWorkplaceIncident()`: add a new happened or observed incident in $workplace.\n    * `addWorkplaceHazard()`: add a new observed hazard in $workplace.\n    * `addWorkplaceAudit()`: add new hse audit plan in $workplace.\n    * `addWorkplacetask()`: add new $workplace hse task for hazard risks mitigation or for incident immediate action.\n    * `getTasks()`: Retrieves a list of all $workplace tasks related to HSE.\n\n\n\n';
    // function declarations

    final addWorkplaceIncident = FunctionDeclaration(
              "addWorkplaceIncident",
              "adds reported health and safety incidents , near misses, or other unsafe events",
              Schema(
                SchemaType.object,
                enumValues: [],
                requiredProperties: ["createdAt", "details", "location"],
                properties: {
                  "createdById": Schema(SchemaType.string),
                  "createdAt": Schema(SchemaType.string),
                  "details": Schema(SchemaType.string),
                  "location": Schema(SchemaType.string,enumValues: locations),
                  "locationExtra": Schema(SchemaType.string),
                  "incidentType": Schema(SchemaType.string),
                  "incidentTypeExtra": Schema(SchemaType.string),
                },
              ),
            );
    
    final addWorkplaceHazard = FunctionDeclaration(
              "addWorkplaceHazard",
              "adds reported health and safety hazard in workplace",
              Schema(
                SchemaType.object,
                enumValues: [],
                requiredProperties: ["createdAt", "description", "location"],
                properties: {
                  "createdById": Schema(SchemaType.string),
                  "createdAt": Schema(SchemaType.string),
                  "description": Schema(SchemaType.string),
                  "location": Schema(SchemaType.string,enumValues: locations),
                  "locationExtra": Schema(SchemaType.string),
                  "incidentType": Schema(SchemaType.string),
                  "incidentTypeExtra": Schema(SchemaType.string),
                  "damageOrInjury": Schema(SchemaType.string),
                  "immediateActions": Schema(SchemaType.string),
                  "preventionReccomendations": Schema(SchemaType.string),
                },
              ),
            );

    _model = GenerativeModel(
      model: 'gemini-2.0-flash', 
      apiKey: dotenv.env['geminiApiKey']!,
      generationConfig: GenerationConfig(
        temperature: 1,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
        responseMimeType: 'text/plain',
      ),
      systemInstruction: Content.system(systemInstructions),
      tools: [
        Tool(
          functionDeclarations: [addWorkplaceIncident,addWorkplaceHazard],
        ),
      ],
    );
    _embeddingModel = GenerativeModel(
      model: 'embedding-001', // Correct model name for embeddings
      apiKey: dotenv.env['geminiApiKey']!,
    );
    _chatSession = _model.startChat(
      history:chatHistory
    );
  }

  GenerativeModel  get model => _model;
  GenerativeModel get embeddingModel => _embeddingModel;
  ChatSession get chatSession => _chatSession;
}