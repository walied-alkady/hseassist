import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';
import 'package:go_router/go_router.dart';
import 'package:greasework/blocs/password_reset_bloc.dart';

import '../repository/enum_repositoy.dart';

class PasswordResetPage extends StatelessWidget {
  const PasswordResetPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.white,
      child: Scaffold(body: BlocBuilder<PasswordResetBloc, PasswordResetStates>(
        builder: (context, state) {
          return SingleChildScrollView(
              child: BlocConsumer<PasswordResetBloc, PasswordResetStates>(
            listener: (BuildContext context, PasswordResetStates state) {
              if (state.status == FormzSubmissionStatus.failure) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(
                    SnackBar(
                      content: Text(state.errorMessage ??'loadingError'.tr()),
                    ),
                  );
              }
              else if(state.status == FormzSubmissionStatus.success){
                
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(
                    SnackBar(
                      content: Text("registerSuccess".tr()),
                    ));
                    context.goNamed(AppPage.login.name);
              } 
            },
            builder: (BuildContext context, PasswordResetStates state) {
              return Column(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                    Container(
                      padding:const EdgeInsets.symmetric(vertical: 25,horizontal: 25) ,
                      height: 170,
                      decoration: const BoxDecoration(color:Colors.blueGrey),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                        Flexible(
                          flex: 4,
                          child: Column(mainAxisSize:MainAxisSize.min,crossAxisAlignment: CrossAxisAlignment.start,children: [
                            Text('resetPassword'.tr(), 
                            style:const TextStyle(fontSize:26,fontWeight:FontWeight.bold,color: Colors.white)
                            ), 
                            ],),
                        ), 
                        ])
                    ), 
                    const SizedBox(height: 30,),
                    SizedBox(
                            height: 100,
                            width: 100,
                            child: Image.asset(
                              'assets/images/greaseOneBearing.png',
                              fit: BoxFit.fill,
                            )
                    ),
                    // input form
                    Container(
                      margin:const EdgeInsets.only(top: 15),
                      padding:const EdgeInsets.only(left: 25, right: 25),
                      child: Form(
                          child: Wrap(
                            children: <Widget>[
                              /// password text field
                              SizedBox(
                                child: TextFormField(
                                  enabled: true,
                                  onChanged: (value) => context
                                      .read<PasswordResetBloc>()
                                      .add(NewPasswordChangedPasswordResetEvent(value)),
                                  keyboardType: TextInputType.text,
                                  decoration: InputDecoration(
                                      labelText: 'password'.tr(),
                                      errorText: state.password.displayError?.name.tr(),
                                      suffixIcon: state.password.isValid? const Icon(Icons.check): null,
                                      prefixIcon: const Icon(Icons.password)),
                                  style:const TextStyle(
                                      color: Colors.black,
                                      fontWeight: FontWeight.normal,
                                      fontSize: 14),
                                  //validator: (value) {return  state.errorMessageUser.isEmpty?null:state.errorMessageUser ;},
                                ),
                              ),
                              ///Confirm password
                              SizedBox(
                                child: TextFormField(
                                  enabled: true,
                                  onChanged: (value) => context
                                      .read<PasswordResetBloc>()
                                      .add(PasswordConfirmPasswordResetEvent(value)),
                                  keyboardType: TextInputType.text,
                                  decoration: InputDecoration(
                                      labelText: 'confirmPassword'.tr(),
                                      errorText: state.passwordConfirm.displayError?.name.tr(),
                                      suffixIcon: state.passwordConfirm.isValid? const Icon(Icons.check): null,
                                      prefixIcon: const Icon(Icons.password)),
                                  style:const TextStyle(
                                      color: Colors.black,
                                      fontWeight: FontWeight.normal,
                                      fontSize: 14),
                                  //validator: (value) {return  state.errorMessageUser.isEmpty?null:state.errorMessageUser ;},
                                ),
                              ),
                                    ]
                                )
                            )
                    ),
                    // reset button
                    Container(
                            padding:const EdgeInsets.only(left: 25, right: 25,bottom: 15),
                            child: state.status.isInProgress
                                  ?const SizedBox(
                                  height: 10,
                                  width: 10,
                                  child: Center(
                                    child: CircularProgressIndicator()
                                  ),
                                )
                                  : ElevatedButton(
                                      style: ElevatedButton.styleFrom(
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(30),
                                        ),
                                        backgroundColor:
                                            state.isValid ? Colors.white30 : Colors.grey,
                                      ),
                                      onPressed: state.isValid
                                        ? () => context
                                            .read<PasswordResetBloc>().add(
                                              const ResetPasswordButtonTappedPasswordResetEvent())
                                        : null,
                                    child: Text('ok'.tr() ,style:const TextStyle(fontSize:14,color: Colors.white) )),
                          ),
                ],
              );
            },
          ));
        },
      )),
    );
  }
}

// jsmith@@example.com
//Client-side (Initiate Reset): The user enters their email in your app's password reset form.

//Client-side (sendPasswordResetEmail): Call FirebaseAuth.instance.sendPasswordResetEmail(email: email). This sends a password reset email to the user. Crucially, the email will contain a link without an action code. This means Firebase won't handle the redirection and password update directly.

//User Receives Email: The user receives an email with a link to your app. (You'll configure this link; see below). 
//The link does not contain any sensitive data like action codes. 
//Instead, it will simply allow your app to recognize that a password reset flow is underway.

//Client-side (Handle Link): When the user clicks the link in the email, your app will open. 
//You'll need to implement logic to detect that the app was opened via this password reset link. 
//(This might involve checking for specific URL parameters or using a custom URL scheme.)

//Client-side (Verify Email State): Use FirebaseAuth.instance.fetchSignInMethodsForEmail(email) to 
//verify that the provided email address has a registered account and is eligible for a password reset. 
//This call confirms the user owns the email address they entered.

//Client-side (New Password Form): Present a form for the user to enter their new password.

//Client-side (Update Password - Cloud Function): Call a Cloud Function to update the user's password. 
//This is the only part where a Cloud Function is required. You'll pass the user's email and the new password to the function.

//Server-side (Cloud Function): The Cloud Function uses the Firebase Admin SDK's updateUser method to set the user's new password.