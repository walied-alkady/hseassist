import 'dart:convert';
import 'dart:io'; 
// import 'package:flutter/services.dart';
import 'package:path/path.dart' as p;

Future<Map<String, Map<String, dynamic>>> _loadAllLanguageFiles(String languagesDirectory) async {
  try {
    final directory = Directory(languagesDirectory);
    final files = directory.listSync().whereType<File>().where((file) => file.path.endsWith('.json'));
    final languages = <String, Map<String, dynamic>>{};

    for (final file in files) {
      final languageCode = file.path.split(Platform.pathSeparator).last.split('.').first;
      final jsonString = await file.readAsString();
      final jsonMap = json.decode(jsonString) as Map<String, dynamic>;
      languages[languageCode] = jsonMap;
    }
    return languages;
  } catch (e) {
    print('Error loading languages: $e');
    return {};
  }
}

Future<void> _generateStringsFile (String languagesDirectory) async { 
  
  final langs = await _loadAllLanguageFiles('${languagesDirectory}assets\\translations\\');
  //final jsonString = await loadJsonFromAssets('english_strings.json');
  //final Map<String, Map<String, String>> jsonMap = json.decode('''$jsonString'''); // Fix: Directly decode jsonString
  //final jsonMap = { "hello": "Hello", "welcome": "Welcome", "goodbye": "Goodbye" }; 
  final buffer = StringBuffer();
  buffer.writeln('// This file is automatically generated. Do not edit.'); // Add a helpful comment
  buffer.writeln('import \'package:flutter/foundation.dart\'; '); // Import foundation package for debugPrint to work 
  buffer.writeln('import \'package:flutter/material.dart\'; '); 
  
  // abstract class
  buffer.writeln('abstract class Strings {');
    langs.values.first.forEach((key, value) {
      final escapedValue = _escapeString(key); 
      buffer.writeln('  String get $escapedValue ;');
    });
  buffer.writeln('}');
  buffer.writeln();
  // language classes
  langs.forEach((key, value){
    buffer.writeln('class ${key}Strings extends Strings {');
    value.forEach((key, value) {
      // Handle different data types in JSON, not just strings
      final escapedValue = _escapeString(value.toString()); // Important for handling special characters
      buffer.writeln('  @override');
      buffer.writeln('  String get $key => \'$escapedValue\';');
    });
    buffer.writeln('}');
  });
  buffer.writeln();
  // resource class
  buffer.writeln('class Resources {');
  buffer.writeln('  BuildContext _context;');
  buffer.writeln('  Resources(this._context);');
  buffer.writeln('    Strings get strings {');
  buffer.writeln('  Locale locale = Localizations.localeOf(_context);');
  buffer.writeln('  switch (locale.languageCode) {');
  langs.forEach((key, value) {
    // Handle different data types in JSON, not just strings
    buffer.writeln('  case (\'$key\'):');
    buffer.writeln('    return ${key}Strings();');
  });
  buffer.writeln('  default:' );
  buffer.writeln('    return enStrings();');
  buffer.writeln('   }');
  buffer.writeln('  }');
  buffer.writeln('  static Resources of(BuildContext context){');
  buffer.writeln('   return Resources(context);');
  buffer.writeln('  }');
  buffer.writeln(' }');
  buffer.writeln();
  // langs.forEach((key, value) {
  //   // Handle different data types in JSON, not just strings
  //   final escapedValue = _escapeString(value.toString()); // Important for handling special characters
  //   buffer.writeln('  String get $key ;');
  // });
  // extension
  buffer.writeln('extension AppContext on BuildContext {');
  buffer.writeln('  Resources get resources => Resources.of(this);');
  buffer.writeln('}');

  final generatedCode = buffer.toString();
  //debugPrint(generatedCode);

  final outputFile = File('Strings.dart');
  outputFile.writeAsStringSync(generatedCode);
}

String _escapeString(String value) {
  // Escape single quotes and backslashes. Add more escaping as needed.
  return value.replaceAll(r'\', r'\\').replaceAll(r"'", r"\'");
}

Future<void> genLangString() async {
  final scriptUri = Platform.script;
  final languagesDirectory = p.fromUri(p.dirname(scriptUri.toString()));
  print(languagesDirectory);
  String result = languagesDirectory.substring(0, languagesDirectory.indexOf('scripts'));
  print(result);
  await _generateStringsFile(result);
}

void main() async {
  await genLangString();
}

